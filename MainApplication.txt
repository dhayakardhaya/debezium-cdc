package com.digitaldots.foundation;

import cdc.autoconfigure.CdcAutoConfiguration;
import com.digitaldots.foundation.db.migrations.InitializeDB;
import io.debezium.connector.postgresql.ChangeEvent;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.connect.source.SourceRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.AutoConfigureBefore;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.data.mongodb.config.EnableMongoAuditing;

import java.util.Properties;
import java.util.function.Consumer;
import java.util.function.Function;

@SpringBootApplication
@EnableMongoAuditing
@AutoConfigureBefore(CdcAutoConfiguration.class)
@Slf4j
public class FoundationApplication {

  @Autowired
  private InitializeDB initializeDB;
  
    public static void main(String[] args) {
        SpringApplication.run(FoundationApplication.class, args);
    }

    @Bean
  CommandLineRunner preLoadMongo() throws Exception {
      return args -> {
          initializeDB.initResources();
          initializeDB.initAdminGroup();
          initializeDB.initSystemAdminUser();
      };
  }
    @Bean
    public Consumer<SourceRecord> mySourceRecordConsumer(
            Function<SourceRecord, byte[]> keySerializer,
            Function<SourceRecord, byte[]> valueSerializer
    ) {
        final Properties props = new Properties();
        return sourceRecord -> {
            log.info("Topic name "+sourceRecord.topic());
            log.info("key Serializer name "+new String(keySerializer.apply(sourceRecord)));
            log.info("value Serializer "+new String(valueSerializer.apply(sourceRecord)));
            log.info("captured record " + sourceRecord.toString());
        };

    }

}
